---
# code: language=ansible
- name: Setup stateless system demo
  hosts: satellite
  become: yes
  vars_files:
    - sat_repos.yml

  tasks:  

  # Install ansible nfs role
  - name: Install NFS role
    community.general.ansible_galaxy_install:
      type: role
      name: geerlingguy.nfs
      dest: /etc/ansible/roles

  # Load ansible nfs role into satellite
  - name: Load NFS role into satellite
    command:
      cmd: hammer ansible roles sync --proxy-id 1 --role-names geerlingguy.nfs
    

  # Provision nfs server
  - name: Provision NFS server
    redhat.satellite.host:
      server_url: "{{ satellite_server_url }}"
      username: "{{ satellite_username }}"
      password: "{{ satellite_password }}" 
      name: "{{ nfs_server }}"  
      hostgroup: test
      provision_method: image
      compute_resource: libvirt hypervisor
      image: "rhel-8"
      architecture: x86_64
      operatingsystem: "RHEL 8.8"
      activation_keys: ak-rhel8
      parameters:
        - name: nfs_rpcbind_state
          value: started
        - name: nfs_rpcbind_enabled
          parameter_type: boolean
          value: true
        - name: nfs_exports
          parameter_type: array
          value: 
            - "/shared (rw,sync,no_root_squash)"
      location: "{{ satellite_location }}"
      organization: "{{ satellite_organization }}"
      root_pass: "r3dh4t1!"
      state: present

  - name: make sure host is powered on
    redhat.satellite.host_power:
      server_url: "{{ satellite_server_url }}"
      username: "{{ satellite_username }}"
      password: "{{ satellite_password }}" 
      hostname: "{{ nfs_server }}"
      state: on

  - name: wait until server ssh is up
    wait_for:
      port: 22
      host: "{{ nfs_server }}"      
  
  - name: run ansible roles on NFS server
    command: 
      cmd: hammer host ansible-roles play --name "{{ nfs_server }}"
 
  - name: Import network boot template
    redhat.satellite.templates_import:
      server_url: "{{ satellite_server_url }}"
      username: "{{ satellite_username }}"
      password: "{{ satellite_password }}"      
  - name: Satellite settings
    include_role:
      name: redhat.satellite.settings
    vars:
      satellite_settings:
        - name: local_boot_PXELinux
          value: "PXELinux default network boot"
      server_url: "{{ satellite_server_url }}"
      username: "{{ satellite_username }}"
      password: "{{ satellite_password }}" 

- name: Configure NFS server
  hosts: nfs_server
  become: yes
  gather_facts: no 

  tasks:
  - name: Install OS in NFS_root
    ansible.builtin.dnf:
      name:
        - "@Base"
        - kernel
        - dracut-network
        - nfs-utils
      installroot: "/shared"
      releasever: 8
      state: present

  - name: Find kernel and initramfs names
    ansible.builtin.find:
      paths: "/shared/boot"
      patterns: "vmlinuz-*,initramfs-*"
    register: kernel

  - name: fetch kernel
    ansible.builtin.fetch:
      src: "{{ item.path }}"
      dest: /tmp/
      flat: yes
    with_items: "{{ kernel.files }}"


- name: put file on correct location
  hosts: satellite
  become: yes
  gather_facts: no 

  tasks:
  - name: copy kernel files to correct location on satellite
    ansible.builtin.copy:
      src: "{{ item }}"
      dest: "/var/lib/tftpboot/{{ item | basename | split('-') | first }}"
    with_fileglob: 
      - "/tmp/vmlinuz*"
      - "/tmp/initramfs*"
    # delegate_to: satellite.example.com
    
  # - name: rename files
  #   ansible.builtin.fetch:
  #     src: "{{ item }}"
  #     dest: /tmp/initramfs
  #     flat: yes
  #   with_fileglob:
  #     - "/shared/boot/initramfs-*"

  # - name: store files in tftp directory
  #   ansible.builtin.copy: 
  #     src: "{{ items }}"
  #     dest: /var/lib/tftpboot
  #   with_items:
  #     - /tmp/vmlinuz
  #     - /tmp/initramfs


  

    
